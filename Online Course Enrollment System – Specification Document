Online Course Enrollment System – Specification Document
Problem Statement:
Design and implement a Java console application for a Course Enrollment System
that handles courses, instructors, students, enrollments, and payments.
Class Requirements:
1. Course
2. Instructor
3. Student
4. PremiumStudent
5. Enrollment
6. Payment
7. Receipt
Business Rules:
1. Students can only enroll in available courses.
2. Premium students may get fee discounts or access to extra materials.
3. Payment must be completed for enrollment confirmation.
4. Enrollment should update course capacity.
5. Each receipt must link to a student and course.
Console Interface Requirements:
• Add Course
• Add Student
• Enroll in Course
• Make Payment
• Display Courses
• Exit
Expected Output Behavior:
• Show enrollment confirmation and receipt.
• Update available course capacity.
• Show fee discounts for premium students.
Questions for Students:
1. Draw the UML Class Diagram.
2. Implement classes with encapsulation.
3. Apply inheritance and aggregation.
4. Implement menu-driven system.

SOURCE CODE:
package second;

public class Course {
    private String courseId;
    private String courseName;
    private Instructor instructor;
    private int capacity;
    private double fee;

    public Course(String courseId, String courseName, Instructor instructor, int capacity, double fee) {
        this.courseId = courseId;
        this.courseName = courseName;
        this.instructor = instructor;
        this.capacity = capacity;
        this.fee = fee;
    }

    public String getCourseId() {
        return courseId;
    }

    public String getCourseName() {
        return courseName;
    }

    public Instructor getInstructor() {
        return instructor;
    }

    public int getCapacity() {
        return capacity;
    }

    public double getFee() {
        return fee;
    }

    public void decreaseCapacity() {
        if (capacity > 0) {
            capacity--;
        }
    }
}

package second;

public class Instructor {
    private String instructorId;
    private String name;

    public Instructor(String instructorId, String name) {
        this.instructorId = instructorId;
        this.name = name;
    }

    public String getInstructorId() {
        return instructorId;
    }

    public String getName() {
        return name;
    }
}
package second;

public class Student {
    private String studentId;
    private String name;

    public Student(String studentId, String name) {
        this.studentId = studentId;
        this.name = name;
    }

    public String getStudentId() {
        return studentId;
    }

    public String getName() {
        return name;
    }

    public double calculateFeeDiscount(double fee) {
        // Normal students have no discount
        return fee;
    }
}

package second;

public class PremiumStudent extends Student {
    private double discountPercentage;
    private boolean accessToExtraMaterials;

    public PremiumStudent(String studentId, String name, double discountPercentage, boolean accessToExtraMaterials) {
        super(studentId, name);
        this.discountPercentage = discountPercentage;
        this.accessToExtraMaterials = accessToExtraMaterials;
    }

    @Override
    public double calculateFeeDiscount(double fee) {
        return fee * (1 - discountPercentage / 100);
    }

    public boolean hasAccessToExtraMaterials() {
        return accessToExtraMaterials;
    }

    public double getDiscountPercentage() {
        return discountPercentage;
    }
}

package second;

public class Enrollment {
    private String enrollmentId;
    private Student student;
    private Course course;
    private boolean isPaid;

    public Enrollment(String enrollmentId, Student student, Course course) {
        this.enrollmentId = enrollmentId;
        this.student = student;
        this.course = course;
        this.isPaid = false;
    }

    public String getEnrollmentId() {
        return enrollmentId;
    }

    public Student getStudent() {
        return student;
    }

    public Course getCourse() {
        return course;
    }

    public boolean isPaid() {
        return isPaid;
    }

    public void setPaid(boolean paid) {
        isPaid = paid;
    }
}
package second;

import java.util.Date;

public class Receipt {
    private String receiptId;
    private Student student;
    private Course course;
    private Payment payment;
    private Date receiptDate;

    public Receipt(String receiptId, Student student, Course course, Payment payment) {
        this.receiptId = receiptId;
        this.student = student;
        this.course = course;
        this.payment = payment;
        this.receiptDate = new Date();
    }

    public String getReceiptId() {
        return receiptId;
    }

    public Student getStudent() {
        return student;
    }

    public Course getCourse() {
        return course;
    }

    public Payment getPayment() {
        return payment;
    }

    public Date getReceiptDate() {
        return receiptDate;
    }

    public void printReceipt() {
        System.out.println("Receipt ID: " + receiptId);
        System.out.println("Student Name: " + student.getName());
        System.out.println("Course Name: " + course.getCourseName());
        System.out.println("Payment Amount: " + payment.getAmount());
        System.out.println("Payment Date: " + payment.getPaymentDate());
        System.out.println("Receipt Date: " + receiptDate);
    }
}
package second;
import java.util.*;
public class MainApp {
    private static Scanner scanner = new Scanner(System.in);
    private static Map<String, Course> courses = new HashMap<>();
    private static Map<String, Student> students = new HashMap<>();
    private static Map<String, Enrollment> enrollments = new HashMap<>();
    private static Map<String, Payment> payments = new HashMap<>();
    private static Map<String, Receipt> receipts = new HashMap<>();
    private static int enrollmentCounter = 1;
    private static int paymentCounter = 1;
    private static int receiptCounter = 1;

    public static void main(String[] args) {
        boolean exit = false;

        while (!exit) {
            showMenu();
            int choice = Integer.parseInt(scanner.nextLine());

            switch (choice) {
                case 1:
                    addCourse();
                    break;
                case 2:
                    addStudent();
                    break;
                case 3:
                    enrollInCourse();
                    break;
                case 4:
                    makePayment();
                    break;
                case 5:
                    displayCourses();
                    break;
                case 6:
                    exit = true;
                    System.out.println("Exiting system.");
                    break;
                default:
                    System.out.println("Invalid choice. Try again.");
            }
        }
    }

    private static void showMenu() {
        System.out.println("\n===== Course Enrollment System =====");
        System.out.println("1. Add Course");
        System.out.println("2. Add Student");
        System.out.println("3. Enroll in Course");
        System.out.println("4. Make Payment");
        System.out.println("5. Display Courses");
        System.out.println("6. Exit");
        System.out.print("Enter choice: ");
    }

    private static void addCourse() {
        System.out.print("Enter Course ID: ");
        String courseId = scanner.nextLine();
        System.out.print("Enter Course Name: ");
        String courseName = scanner.nextLine();
        System.out.print("Enter Instructor ID: ");
        String instructorId = scanner.nextLine();
        System.out.print("Enter Instructor Name: ");
        String instructorName = scanner.nextLine();
        System.out.print("Enter Course Capacity: ");
        int capacity = Integer.parseInt(scanner.nextLine());
        System.out.print("Enter Course Fee: ");
        double fee = Double.parseDouble(scanner.nextLine());

        Instructor instructor = new Instructor(instructorId, instructorName);
        Course course = new Course(courseId, courseName, instructor, capacity, fee);
        courses.put(courseId, course);

        System.out.println("Course added successfully.");
    }

    private static void addStudent() {
        System.out.print("Enter Student ID: ");
        String studentId = scanner.nextLine();
        System.out.print("Enter Student Name: ");
        String studentName = scanner.nextLine();
        System.out.print("Is Premium Student? (y/n): ");
        String isPremium = scanner.nextLine();

        Student student;
        if (isPremium.equalsIgnoreCase("y")) {
            System.out.print("Enter Discount Percentage: ");
            double discount = Double.parseDouble(scanner.nextLine());
            System.out.print("Access to Extra Materials? (true/false): ");
            boolean access = Boolean.parseBoolean(scanner.nextLine());
            student = new PremiumStudent(studentId, studentName, discount, access);
        } else {
            student = new Student(studentId, studentName);
        }
        students.put(studentId, student);
        System.out.println("Student added successfully.");
    }

    private static void enrollInCourse() {
        System.out.print("Enter Student ID: ");
        String studentId = scanner.nextLine();
        Student student = students.get(studentId);
        if (student == null) {
            System.out.println("Student not found.");
            return;
        }

        System.out.print("Enter Course ID: ");
        String courseId = scanner.nextLine();
        Course course = courses.get(courseId);
        if (course == null) {
            System.out.println("Course not found.");
            return;
        }

        if (course.getCapacity() <= 0) {
            System.out.println("Course is full. Enrollment not possible.");
            return;
        }

        // Enroll student
        String enrollmentId = "E" + enrollmentCounter++;
        Enrollment enrollment = new Enrollment(enrollmentId, student, course);
        enrollments.put(enrollmentId, enrollment);
        course.decreaseCapacity();

        System.out.println("Enrollment successful. Enrollment ID: " + enrollmentId);
        System.out.println("Please proceed to make payment to confirm enrollment.");
    }

    private static void makePayment() {
        System.out.print("Enter Enrollment ID: ");
        String enrollmentId = scanner.nextLine();
        Enrollment enrollment = enrollments.get(enrollmentId);
        if (enrollment == null) {
            System.out.println("Enrollment not found.");
            return;
        }
        if (enrollment.isPaid()) {
            System.out.println("Payment already made for this enrollment.");
            return;
        }

        Student student = enrollment.getStudent();
        Course course = enrollment.getCourse();
        double originalFee = course.getFee();
        double feeToPay = student.calculateFeeDiscount(originalFee);

        System.out.println("Original Fee: " + originalFee);
        if (student instanceof PremiumStudent) {
            PremiumStudent ps = (PremiumStudent) student;
            System.out.println("Premium Discount: " + ps.getDiscountPercentage() + "%");
            System.out.println("Discounted Fee: " + feeToPay);
            System.out.println("Access to Extra Materials: " + ps.hasAccessToExtraMaterials());
        }

        System.out.print("Confirm payment of " + feeToPay + "? (y/n): ");
        String confirmPayment = scanner.nextLine();
        if (!confirmPayment.equalsIgnoreCase("y")) {
            System.out.println("Payment cancelled.");
            return;
        }

        String paymentId = "P" + paymentCounter++;
        Payment payment = new Payment(paymentId, enrollment, feeToPay);
        payments.put(paymentId, payment);

        enrollment.setPaid(true);

        String receiptId = "R" + receiptCounter++;
        Receipt receipt = new Receipt(receiptId, student, course, payment);
        receipts.put(receiptId, receipt);

        System.out.println("Payment successful. Enrollment confirmed.");
        System.out.println("Receipt details:");
        receipt.printReceipt();
    }

    private static void displayCourses() {
        if (courses.isEmpty()) {
            System.out.println("No courses available.");
            return;
        }
        System.out.println("\nAvailable Courses:");
        for (Course course : courses.values()) {
            System.out.println("Course ID: " + course.getCourseId() +
                    ", Name: " + course.getCourseName() +
                    ", Instructor: " + course.getInstructor().getName() +
                    ", Capacity: " + course.getCapacity() +
                    ", Fee: " + course.getFee());
        }
    }
}

OUTPUT:
===== Course Enrollment System =====
1. Add Course
2. Add Student
3. Enroll in Course
4. Make Payment
5. Display Courses
6. Exit
Enter choice: 1
Enter Course ID: 302
Enter Course Name: JAVA
Enter Instructor ID: I01
Enter Instructor Name: ADHI
Enter Course Capacity: 2
Enter Course Fee: 5000
Course added successfully.
